import pandas as pd
import numpy as np
import os

def save_wave_height_to_csv(sfgrid_dat, output_filename):
    # Determine the directory of the current script and the data folder path
    script_dir = os.path.dirname(__file__)
    data_folder = os.path.join(script_dir, 'data')
    
    # Ensure the data folder exists
    os.makedirs(data_folder, exist_ok=True)
    
    # Construct the full output file path
    output_csv_path = os.path.join(data_folder, output_filename)
    
    # Read the output table generated by SWAN
    h_s = pd.read_table(sfgrid_dat, sep="\s+", header=None)
    
    # Save the data to the CSV file
    np.savetxt(output_csv_path, h_s, delimiter=',')
    
    return h_s


# def postpro(sfgrid_dat,xgrid,ygrid,mxc,myc,x,ya,yb):
#     import matplotlib.pyplot as plt
#     from matplotlib import ticker
#     import pandas as pd
#     import numpy as np


#     # this is where you define your body positions, I add approx half the
#     # set diameter so the markers are centered

#     wecx = [i + 10 for i in x]
#     wecy = [None] * len(wecx)
#     for i in range(len(wecx)):
#         if i > 2:
#             wecy[i] = yb
#         else:
#             wecy[i] = ya

#     # this command reads the output table generated by SWAN
#     h_s = pd.read_table(sfgrid_dat, sep="\s+", header=None)

#     # this saves that data to a .csv file. File path up to your discretion
#     #waveHeight = np.savetxt('AT_2a.csv',h_s,delimiter=',')
#     waveHeight = np.savetxt('/mnt/c/Users/ov162/transmission-reflection/data/PA_2a.csv',h_s,delimiter=',')

#     # this will load your data if you saved it previously and do not want to run SWAN again
#     h_s = np.loadtxt('/mnt/c/Users/ov162/transmission-reflection/data/PA_2a.csv',delimiter=',')

#     # this is defining your plotting parameters
#     nx, ny = (mxc + 1, myc + 1)
#     x = np.linspace(0, xgrid, nx)
#     y = np.linspace(0, ygrid, ny)
#     X, Y = np.meshgrid(x,y)

#     # now you are plotting
#     fig,ax = plt.subplots(1,1)
#     cp = ax.contourf(X,Y,h_s,40)
#     plt.scatter(wecx,wecy,marker='_',color='red',s=25, linewidth=2)
#     ax.set_xlabel('x [m]',fontsize=17)
#     ax.set_ylabel('y [m]',fontsize=17)
#     ax.ticklabel_format(axis='both',style='sci')
#     cbar = fig.colorbar(cp)
#     cbar.set_label('Wave Height',fontsize=17,rotation=270,labelpad=17)
#     cbar.ax.tick_params(labelsize=15)
#     cp.set_clim(0.684, 0.81)                    # set to compare plots apples to apples
#     plt.xticks(fontsize=14, rotation=90)
#     plt.yticks(fontsize=14, rotation=90)
#     plt.tight_layout()
#     print('yip')
#     plt.savefig('PA_1a.pdf')
#     print('ee')
#     plt.show()
#     return waveHeight

# # you can just run this post_pro file to mesh with your plots

# import numpy as np
# xgrid = 3000                                # size of grid in x-direction
# ygrid = 5000                                # size of grid in y-direction
# mxc = 300                                   # number of grid points in x (-1)
# myc = 500                                   # number of grid points in y (-1)
# sfgrid_dat = '/mnt/c/Users/ov162/transmission-reflection/run_all/sfgrid.dat'
# x = [1490,1550,1610] 
# ya, yb = 4500, 4450

# waveheight = postpro(sfgrid_dat,xgrid,ygrid,mxc,myc,x,ya,yb)